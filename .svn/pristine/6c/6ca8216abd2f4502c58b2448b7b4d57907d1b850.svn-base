<?php
class Examination_model extends CI_Model {
	public function __construct() {
		parent::__construct ();
		$this->load->database ();
		$this->load->model ( 'Patient' );
	}
	/**
	 * Updates the desired queue by dequeueing
	 * 
	 * @param number $queuename
	 */
	public function updateQueue($queuename = 0) {
		$q1 = $this->getQueue ( $queuename ) ;
		
		if (count ( $q1 ) > 0) {
			$q1->pop();
			$serialized = $q1->serialize ();
			$this->db->trans_start();
			$this->db->query("SELECT * from queue where queue_name=".$queuename." FOR UPDATE");
			$this->db->query ( "UPDATE QUEUE SET queue_content='" . $serialized . "' WHERE queue_name = " . $queuename );
			$this->db->trans_complete();
			
			
		}
	}
	
	
	
	/**
	 * Gets a serialized queue from the database, unserializes it,
	 * and returns it.
	 *
	 * @param $name the
	 *        	string name of the queue (e.g. 'unsorted', '1')
	 * @return the unserialized queue
	 */
	public function getQueue($name) {
		$queueTable = $this->db->query ( "SELECT `queue_content`
    	FROM queue WHERE queue_name LIKE '" . $name . "'" );
		$row = $queueTable->row_array ();
		$serializedQueue = $row ['queue_content'];
		$unserializedQueue = new SplQueue ();
		if (! empty ( $serializedQueue )) {
			$unserializedQueue->unserialize ( $serializedQueue );
		}
		return $unserializedQueue;
	}
	/**
	 *Returns the Patient objects that are in the desired queue
	 * @param string $queue_names        	
	 * @return array of Patient Objects
	 */
	public function get_patient_models_in_queue($queue_name) {
		$q1 =  $this->getQueue ( $queue_name ) ;
		$patients = array ();
		
		foreach ( $q1 as $visit ) {
			if ($visit != "") {
				$row = $this->get_patient_visit_info_row ( $visit );
				// echo 'in get patient models '. $row ->first_name;
				$tempPatient = $this->Patient->__construct ( $row->patient_id, $row->ramq_id, $row->last_name, $row->first_name, $row->phone_num_home, $row->phone_num_emergency, $row->primary_physician, $row->existing_conditions, $row->medication1, $row->medication2, $row->medication3 );
				$patients [] = $tempPatient;
			} 
		}
		// $patients = $this -> db -> query();
		return $patients;
	}
	/**
	 *Returns the Visit objects that are in the desired queue
	 * @param string $queue_names        	
	 * @return array of Visit Objects
	 */
	public function get_visit_models_in_queue($queue_name) {
		// $q1 = explode(",",$this -> getQueue($queue_name));
		$q1 = $this->getQueue ( $queue_name );
		$visits = array ();
		
		//$q1 -> next();
	//	echo 'count of q1 : '. count($q1) .' visit id '. $q1->pop()->getVisit_id() ;
		foreach ( $q1 as $visit ) {
			if ($visit != "" && $visit != "NULL") {					
						
				//echo 'in get visit id: ' . $visit->getVisit_id ();				
				$row = $this->get_patient_visit_info_row ( $visit->getVisit_id () );
				if (! is_null ( $row )) {
					$tempVisit = new Visit ( $row->visit_id, $row->patient_id, $row->time_of_registration, $row->time_of_examination, $row->code, "", $row->primary_complaint, $row->symptom1, $row->symptom2 );
					$visits [] = $tempVisit;
				}
			}
		}
		// echo 'visit count in get visit models : '.count($visits);
		return $visits;
	}
	/**
	 * Returns a row from the db containing all the info about the patient and visit
	 * associated with $visitId
	 *
	 * @param number $visitId        	
	 * @return array
	 */
	public function get_patient_visit_info_row($visitId = 0) {
		if (isset ( $visitId ) && is_numeric ( $visitId ) && $visitId > 0) {
			$query = $this->db->query ( "SELECT * FROM VISIT V, PATIENT P WHERE V.PATIENT_ID =P.PATIENT_ID AND V.VISIT_ID=" . $visitId );
			$row = $query->row ();
			return $row;
		}
		return null;
	}
	
}
?>