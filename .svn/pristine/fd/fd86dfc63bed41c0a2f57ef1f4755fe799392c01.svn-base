<?php
if (! defined ( 'BASEPATH' ))
	exit ( 'No direct script access allowed' );
class Examination extends CI_Controller {
	private $queue1cont;
	private $queue2cont;
	private $queue3cont;
	private $queue4cont;
	private $queue5cont;
	private $positionCtr;
	
	public function __construct() {
		parent::__construct ();
		
		$this->load->model ( 'examination_model' );
		$this->load->model ( 'web_api_model' );
		$this->load->model ( 'Patient' );
		$this->load->model ( 'Visit' );
		$this->load->driver ( 'session' );
		$this->load->helper ( 'form' );
		
		$this->positionPattern = array (
				2,
				3,
				2,
				4,
				3,
				2,
				5,
				2,
				3,
				4 
		);
		$this->positionMax = 10;
		
		if ($this->session->userdata ( 'positionCtr' )) {
			$this->positionCtr = $this->session->userdata ( 'positionCtr' );
		} else {
			$this->positionCtr = 0;
		}
	}
	
	/**
	 * Opens a visit page with information about the patient and their current visit
	 *
	 * @param number $visitId        	
	 */
	public function visit($visitId = -1) {
		
		// $this->session->set_userdata('position_ctr', $this->positionCtr +1);
		if(isset($visitId) && $visitId >0){
		$rowInfo = $this->examination_model->get_patient_visit_info_row ( $visitId );
		$data ['last_name'] = $rowInfo->last_name;
		$data ['first_name'] = $rowInfo->first_name;
		$data ['existing_conditions'] = $rowInfo->existing_conditions;
		$data ['medication1'] = $rowInfo->medication1;
		$data ['medication2'] = $rowInfo->medication2;
		$data ['medication3'] = $rowInfo->medication3;
		$data ['primary_physician'] = $rowInfo->primary_physician;
		$data ['phone_num_home'] = $rowInfo->phone_num_home;
		$data ['phone_num_emergency'] = $rowInfo->phone_num_emergency;
		$data ['primary_complaint'] = $rowInfo->primary_complaint;
		$data ['symptom1'] = $rowInfo->symptom1;
		$data ['symptom2'] = $rowInfo->symptom2;
		$data ['code'] = $rowInfo->code;
		$data ['page_title'] = 'Clinic - Visit';
		$this->load->view ( 'examination/visit', $data );
		}
	}
	/**
	 * Sends the json data to the json page url
	 * @param number $visitId
	 * @param number $code
	 */
	public function json($visitId=-1,$code=-1) {
		if(isset($visitId) && $visitId > 0 && isset($code) && $code >0) {
			$result = $this->web_api_model->get_visits($visitId,$code);
		} else {
			$result = NULL;
		}
		
		// If it's not null
		if(isset($result)) {
			// If it's not zero
			if($result) {
				$output = $result;
			} else {
				// It's zero. No records were found.
				$output = array('error' => 0);
			}
		} else {
			// It's null. Visit id was not specified.
			$output = array('error' => 1);
		}
		
		$data['json'] = json_encode($output);
		//third option is to return data from page instead of viewing the page
		$this->load-> template('web_api/web_api', $data,true);
	}
	/**
	 * Dequeue a patient following a pattern and opens a visit page
	 */
	public function dequeue() {
		$this->queue1cont = $this->examination_model->get_visit_models_in_queue ( "1" );		
		$this->queue2cont = $this->examination_model->get_visit_models_in_queue ( "2" );		
		$this->queue3cont = $this->examination_model->get_visit_models_in_queue ( "3" );		
		$this->queue4cont = $this->examination_model->get_visit_models_in_queue ( "4" );		
		$this->queue5cont = $this->examination_model->get_visit_models_in_queue ( "5" );
		
		//Take care of queue 1 first
		if (count ( $this->queue1cont ) != 0) {
			$visit = array_shift ( $this->queue1cont );
			$id = $visit->getVisit_id ();
			$code = $visit -> getCode();
			$this -> examination_model -> updateQueue("1");
			//$this -> json($id,$code);
			$this->visit ( $visit->getVisit_id () );
		} else {
			
			$this->positionCtr = $this->session->userdata('positionCtr');
			//check if the current queue is empty
			if( empty($this -> {"queue".$this->positionCtr."cont"})){
				$this->positionCtr = $this->positionCtr +1;
				$this->session->set_userdata ( 'positionctr', $this->positionCtr );
			}else{
				$visit = $this -> {"queue".$this->positionCtr."cont"}[0];
				//check all the higher priority queues if they have patients
				//that have been waiting longer
				for($i=$this->positionCtr-1; $i > 0; $i--){
					$avisit = $this -> {"queue".$i."cont"}[0];
					
						if( $visit -> getTimeOfRegistration() > $avisit-> getTimeOfRegistration()  ){
							$visit1 = array_shift ($this -> {"queue".$i."cont"} );
								
							$id = $visit1->getVisit_id ();
							$code = $visit1 -> getCode();
							$this -> examination_model -> updateQueue($i);
							$this->visit ( $id );
							break 2;
						}					
				}
				//otherwise take care of current patient
				$visit1 = array_shift ( $this -> {"queue".$this->positionCtr."cont"} );
					
				$id = $visit1->getVisit_id ();
				$code = $visit1 -> getCode();
				$this -> examination_model -> updateQueue("2");
				$this->visit ( $id );				
				
			}
			$this->positionCtr = $this->positionCtr +1;
			$this->session->set_userdata ( 'positionctr', $this->positionCtr );
		}
		
		
		// check code 1 first
		/*if (count ( $this->queue1cont ) != 0) {
			$visit = array_shift ( $this->queue1cont );
			$id = $visit->getVisit_id ();
			$this -> examination_model -> updateQueue("1");
			$this->visit ( $visit->getVisit_id () );
		} else {
			if ($this->positionCtr < $this->positionMax) {
				$queuename = $this->positionPattern [$this->positionCtr];
				
				// while(){}
				switch ($queuename) {
					case "2" :
						echo 'case 2 ' . count ( $this->queue2cont );
						if (count ( $this->queue2cont ) != 0) {
							$visit = array_shift ( $this->queue2cont );
							
							$id = $visit->getVisit_id ();
							$this -> examination_model -> updateQueue("2");
							$this->visit ( $visit->getVisit_id () );
						}
						break;
					case "3" :
						echo 'case 3 ' . count ( $this->queue3cont );
						if (count ( $this->queue3cont ) != 0) {
							$visit = array_shift ( $this->queue3cont );
							$this->visit ( $visit->getVisit_id () );
						}
						break;
					case "4" :
						echo 'case 4 ' . count ( $this->queue4cont );
						if (count ( $this->queue4cont ) != 0) {
							$visit = array_shift ( $this->queue4cont );
							$this->visit ( $visit->getVisit_id () );
						}
						break;
					case "5" :
						echo 'case 5 ' . count ( $this->queue5cont );
						if (count ( $this->queue5cont ) != 0) {
							$visit = array_shift ( $this->queue5cont );
							$this->visit ( $visit->getVisit_id () );
						}
						break;
				}
			}
			$this->positionCtr = $this->positionCtr + 1;
			$this->session->set_userdata ( 'position_ctr', $this->positionCtr );
		}*/
	}
	public function _output($output) {
		echo $output;
	}
	public function index() {
		$data ['pagetitle'] = 'Clinic - Examination';
		//checks if there is already positionCtr in userdata 
		//otherwise sets to 0 
		if ($this->session->userdata ( 'positionCtr' )) {
			if($this->session->userdata ( 'positionCtr' ) <10){
				$this->positionCtr = $this->session->userdata ( 'positionCtr' );
						
			}else{
				$this->positionCtr =0;
				$this->session->set_userdata ( 'positionctr', $this->positionCtr );
			}
		} else {
			$this->positionCtr = 0;
		}
		
		//getting all the visit models in the queues
		$this->queue1cont = $this->examination_model->get_visit_models_in_queue ( "1" );
		$this->queue2cont = $this->examination_model->get_visit_models_in_queue ( "2" );
		$this->queue3cont = $this->examination_model->get_visit_models_in_queue ( "3" );
		$this->queue4cont = $this->examination_model->get_visit_models_in_queue ( "4" );
		$this->queue5cont = $this->examination_model->get_visit_models_in_queue ( "5" );
		
		//checks if there are any patients left in the queues
		if(count($this -> queue1cont)+count($this -> queue2cont)+count($this -> queue3cont)+count($this -> queue4cont)+count($this -> queue5cont) == 0){
				$data['visitsLeft'] ='There are no patients left';
		}else{
			$data['visitsLeft'] = 'There are patients left';
		}
		
		//sets the queue's amounts
		$amount1 = count ( $this->queue1cont );
		$amount2 = count ( $this->queue2cont );
		$amount3 = count ( $this->queue3cont );
		$amount4 = count ( $this->queue4cont );
		$amount5 = count ( $this->queue5cont );
		$data ['queue1'] = $amount1;
		$data ['queue2'] = $amount2;
		$data ['queue3'] = $amount3;
		$data ['queue4'] = $amount4;
		$data ['queue5'] = $amount5;
		$this->load->template ( 'examination/examination', $data );
	}	
}

/* End of file examinationCTL.php */